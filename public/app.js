
let tg = window.Telegram.WebApp;
let coins = 0;
let liquidity = 0;
const coinsDisplay = document.getElementById('coins');
const liquidityDisplay = document.getElementById('liquidity');
const onion = document.getElementById('onion');
const userInfo = document.getElementById('user-info');
const authButton = document.getElementById('auth-button');
const addLiquidityButton = document.getElementById('add-liquidity');
const removeLiquidityButton = document.getElementById('remove-liquidity');

tg.expand();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
function checkAuthorization() {
    if (tg.initDataUnsafe && tg.initDataUnsafe.user) {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        userInfo.textContent = `–ü—Ä–∏–≤–µ—Ç, ${tg.initDataUnsafe.user.first_name}!`;
        authButton.style.display = 'none';
        initGame();
    } else {
        // –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω
        userInfo.textContent = '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å';
        authButton.style.display = 'block';
        onion.style.pointerEvents = 'none'; // –û—Ç–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –ª—É–∫—É
    }
}

authButton.addEventListener('click', () => {
    tg.showPopup({
        title: '–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è',
        message: '–î–ª—è –∏–≥—Ä—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è',
        buttons: [{ type: 'ok', text: '–ê–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å—Å—è' }]
    }, () => {
        // –≠—Ç–æ—Ç –∫–æ–ª–±—ç–∫ –≤—ã–∑–æ–≤–µ—Ç—Å—è –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –ø–æ–ø–∞–ø–∞
        // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏
        checkAuthorization();
    });
});

async function getUserData() {
    if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) {
        return null;
    }
    const response = await fetch('/api/user-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: tg.initDataUnsafe.user.id })
    });
    return await response.json();
}

async function saveUserData() {
    if (!tg.initDataUnsafe || !tg.initDataUnsafe.user) {
        return;
    }
    await fetch('/api/save-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: tg.initDataUnsafe.user.id, coins, liquidity })
    });
}


async function initGame() {
    const userData = await getUserData();
    if (userData) {
        coins = userData.coins || 0;
        updateCoinsDisplay();
        onion.style.pointerEvents = 'auto'; // –í–∫–ª—é—á–∞–µ–º –∫–ª–∏–∫–∏ –ø–æ –ª—É–∫—É
    }
}

function updateCoinsDisplay() {
    coinsDisplay.textContent = `–õ—É–∫–∫–æ–∏–Ω—ã: ${coins}`;
}

async function clickOnion() {
    coins++;
    updateCoinsDisplay();
    createFloatingCoin();
    if (coins % 10 === 0) createBackgroundOnion();
    await saveUserData();
}


tg.expand();

async function getUserData() {
    const response = await fetch('/api/user-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: tg.initDataUnsafe.user.id })
    });
    return await response.json();
}

async function saveUserData() {
    await fetch('/api/save-data', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ userId: tg.initDataUnsafe.user.id, coins: coins })
    });
}

async function initGame() {
    const userData = await getUserData();
    if (userData) {
        coins = userData.coins || 0;
        liquidity = userData.liquidity || 0;
        updateDisplays();
        onion.style.pointerEvents = 'auto';
    }
}

function updateDisplays() {
    coinsDisplay.textContent = `–õ—É–∫–∫–æ–∏–Ω—ã: ${coins}`;
    liquidityDisplay.textContent = `–õ–∏–∫–≤–∏–¥–Ω–æ—Å—Ç—å: ${liquidity}`;
}

function updateCoinsDisplay() {
    coinsDisplay.textContent = `–õ—É–∫–∫–æ–∏–Ω—ã: ${coins}`;
}

async function clickOnion() {
    coins++;
    updateDisplays();
    createFloatingCoin();
    if (coins % 10 === 0) createBackgroundOnion();
    await saveUserData();
}

function addLiquidity() {
    if (coins >= 10) {
        coins -= 10;
        liquidity++;
        updateDisplays();
        saveUserData();
    } else {
        alert('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ª—É–∫–∫–æ–∏–Ω–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏!');
    }
}

function removeLiquidity() {
    if (liquidity > 0) {
        liquidity--;
        coins += 9; // 10% –∫–æ–º–∏—Å—Å–∏—è –ø—Ä–∏ –≤—ã–≤–æ–¥–µ –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏
        updateDisplays();
        saveUserData();
    } else {
        alert('–£ –≤–∞—Å –Ω–µ—Ç –ª–∏–∫–≤–∏–¥–Ω–æ—Å—Ç–∏ –¥–ª—è –≤—ã–≤–æ–¥–∞!');
    }
}


function createFloatingCoin() {
    const coin = document.createElement('div');
    coin.textContent = '+1';
    coin.classList.add('coin');
    coin.style.left = `${Math.random() * window.innerWidth}px`;
    coin.style.top = `${Math.random() * window.innerHeight}px`;
    document.body.appendChild(coin);
    setTimeout(() => coin.remove(), 1000);
}

function createBackgroundOnion() {
    const bgOnion = document.createElement('div');
    bgOnion.textContent = 'üßÖ';
    bgOnion.classList.add('background-onion');
    bgOnion.style.left = `${Math.random() * window.innerWidth}px`;
    bgOnion.style.top = `${Math.random() * window.innerHeight}px`;
    document.body.appendChild(bgOnion);
    setTimeout(() => bgOnion.remove(), 20000);
}

// ... (–æ—Å—Ç–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ...

onion.addEventListener('click', clickOnion);
addLiquidityButton.addEventListener('click', addLiquidity);
removeLiquidityButton.addEventListener('click', removeLiquidity);

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
checkAuthorization();

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–±—ã—Ç–∏—è viewportChanged
tg.onEvent('viewportChanged', checkAuthorization);
onion.addEventListener('click', clickOnion);
initGame();
